.globl	constructor
.public	constructor
.type	constructor, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7_with_init_storage$
}
IF
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
ENDS
; modifier requireKey
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 101
ACCEPT
; constructor Vault
; end constructor Vault
; end modifier requireKey
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	addToken
.public	addToken
.type	addToken, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode name
LDREF
; Decode symbol
LDREF
; Decode decimals
LDU 8
; Decode rootAddr
LDMSGADDR
; Decode rootKey
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode ttwCode
;; decode TvmCell
LDREF
ENDS
;; param: name
;; param: symbol
;; param: decimals
;; param: rootAddr
;; param: rootKey
;; param: ttwCode
; modifier reqOwnOrGovern
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	;; get member sender
	GETGLOB 9
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SDEQ
	NOT
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; get member sender
		GETGLOB 9
		;; push identifier governanceAddr
		GETGLOB 10
		SDEQ
	}
	IF
}
IFNOT
THROWIFNOT 101
;; if
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
PUSHCONT {
	ACCEPT
}
IF
;; end if
; function addToken
;; map.add
; expValue
;; fetch _tokens
GETGLOB 11
; end expValue
;; push identifier name
PUSH S6
;; push identifier symbol
PUSH S6
;; push identifier decimals
PUSH S6
;; push identifier rootAddr
PUSH S6
;; push identifier rootKey
PUSH S6
;; push identifier ttwCode
PUSH S6
PUSHINT 0
TUPLE 7
UNTUPLE 7
NEWC
PUSH S7
STREFR
PUSH S6
STREFR
PUSH S5
STUR 8
PUSH S4
STSLICER
PUSH S3
STUR 256
PUSH S2
STREFR
PUSH S1
STUR 128
XCHG s7
BLKDROP 7
;; push identifier rootAddr
PUSH S4
ROT
PUSHINT 267
DICTADDB
SWAP
; colValue
SETGLOB 11
; end colValue
DROP
; end function addToken
BLKDROP 6
; end modifier reqOwnOrGovern
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	addToken_internal
.type	addToken_internal, @function
;; param: name
;; param: symbol
;; param: decimals
;; param: rootAddr
;; param: rootKey
;; param: ttwCode
; modifier reqOwnOrGovern
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	;; get member sender
	GETGLOB 9
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SDEQ
	NOT
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; get member sender
		GETGLOB 9
		;; push identifier governanceAddr
		GETGLOB 10
		SDEQ
	}
	IF
}
IFNOT
THROWIFNOT 101
;; if
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
PUSHCONT {
	ACCEPT
}
IF
;; end if
; function addToken
;; map.add
; expValue
;; fetch _tokens
GETGLOB 11
; end expValue
;; push identifier name
PUSH S6
;; push identifier symbol
PUSH S6
;; push identifier decimals
PUSH S6
;; push identifier rootAddr
PUSH S6
;; push identifier rootKey
PUSH S6
;; push identifier ttwCode
PUSH S6
PUSHINT 0
TUPLE 7
UNTUPLE 7
NEWC
PUSH S7
STREFR
PUSH S6
STREFR
PUSH S5
STUR 8
PUSH S4
STSLICER
PUSH S3
STUR 256
PUSH S2
STREFR
PUSH S1
STUR 128
XCHG s7
BLKDROP 7
;; push identifier rootAddr
PUSH S4
ROT
PUSHINT 267
DICTADDB
SWAP
; colValue
SETGLOB 11
; end colValue
DROP
; end function addToken
BLKDROP 6
; end modifier reqOwnOrGovern

.globl	getTokens
.public	getTokens
.type	getTokens, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
PUSH S1
PUSHCONT {
	LDU 32
	GETGLOB 4
	ROT
	SETINDEXQ 5
	SETGLOB 4
}
IFNOT
; Decode input parameters
ENDS
; function getTokens
;; ret param: tokenAddress
PUSHINT 0
NEWDICT
PAIR
;; ret param: symbol
PUSHINT 0
NEWDICT
PAIR
;; ret param: name
PUSHINT 0
NEWDICT
PAIR
;; map.min
;; push identifier _tokens
GETGLOB 11
PUSHINT 267
DICTMIN
NULLSWAPIFNOT
PUSHCONT {
	SWAP
	LDREF
	LDREF
	LDU 8
	LDMSGADDR
	LDU 256
	LDREF
	PLDU 128
	TUPLE 7
	TUPLE 2
}
IF
;; decl: minToken
;; if
;; push identifier minToken
DUP
ISNULL
PUSHCONT {
	;; push identifier minToken
	DUP
	DUP
	ISNULL
	THROWIF 63
	UNTUPLE 2
	;; decl: key
	;; decl: value
	; expValue
	PUSH S5
	; end expValue
	;; push identifier key
	PUSH S2
	;; array.push(..)
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSET
	PAIR
	; colValue
	POP S6
	; end colValue
	; expValue
	PUSH S4
	; end expValue
	;; get member symbol
	;; push identifier value
	PUSH S1
	INDEX 1
	;; array.push(..)
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETREF
	PAIR
	; colValue
	POP S5
	; end colValue
	; expValue
	PUSH S3
	; end expValue
	;; get member name
	;; push identifier value
	PUSH S1
	INDEX 0
	;; array.push(..)
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETREF
	PAIR
	; colValue
	POP S4
	; end colValue
	; while
	FALSE ; decl return flag
	PUSHCONT {
		DUP
		LESSINT 2
		DUP
		PUSHCONT {
			DROP
			TRUE
		}
		IF
	}
	PUSHCONT {
		;; map.next
		;; push identifier key
		PUSH S2
		;; push identifier _tokens
		GETGLOB 11
		PUSHINT 267
		DICTGETNEXT
		NULLSWAPIFNOT
		PUSHCONT {
			SWAP
			LDREF
			LDREF
			LDU 8
			LDMSGADDR
			LDU 256
			LDREF
			PLDU 128
			TUPLE 7
			TUPLE 2
		}
		IF
		;; decl: nextToken
		;; if
		FALSE ; decl return flag
		;; push identifier nextToken
		PUSH S1
		ISNULL
		NOT
		PUSHCONT {
			;; push identifier nextToken
			PUSH S1
			DUP
			ISNULL
			THROWIF 63
			UNTUPLE 2
			;; decl: nextKey
			;; decl: nextValue
			; expValue
			PUSH S10
			; end expValue
			;; push identifier nextKey
			PUSH S2
			;; array.push(..)
			SWAP
			UNPAIR
			PUSH S1
			INC
			XCHG s3
			ROTREV
			PUSHINT 32
			DICTUSET
			PAIR
			; colValue
			POP S11
			; end colValue
			; expValue
			PUSH S9
			; end expValue
			;; get member symbol
			;; push identifier nextValue
			PUSH S1
			INDEX 1
			;; array.push(..)
			SWAP
			UNPAIR
			PUSH S1
			INC
			XCHG s3
			ROTREV
			PUSHINT 32
			DICTUSETREF
			PAIR
			; colValue
			POP S10
			; end colValue
			; expValue
			PUSH S8
			; end expValue
			;; get member name
			;; push identifier nextValue
			PUSH S1
			INDEX 0
			;; array.push(..)
			SWAP
			UNPAIR
			PUSH S1
			INC
			XCHG s3
			ROTREV
			PUSHINT 32
			DICTUSETREF
			PAIR
			; colValue
			POP S9
			; end colValue
			; expValue
			; end expValue
			;; push identifier nextKey
			PUSH S1
			; colValue
			POP S7
			; end colValue
			DROP2
		}
		PUSHCONT {
			;; break
			BLKDROP 3
			PUSHINT 2
			RET
		}
		IFELSE
		DUP
		IFRET
		DROP
		;; end if
		DROP
	}
	WHILE
	DROP
	; end while
	DROP2
}
IFNOT
;; end if
;; returning named params
DROP
;; emitting 3 value(s)
PUSH S3
EQINT -1
PUSHCONT {
	PUSH S5
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xaa4b219c
	PUSH S3
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S2
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S1
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	ENDC
	PUSHINT 1
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S3
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S2
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S1
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
BLKDROP 3
; end function getTokens
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	getTokens_internal
.type	getTokens_internal, @function
; function getTokens
;; ret param: tokenAddress
PUSHINT 0
NEWDICT
PAIR
;; ret param: symbol
PUSHINT 0
NEWDICT
PAIR
;; ret param: name
PUSHINT 0
NEWDICT
PAIR
;; map.min
;; push identifier _tokens
GETGLOB 11
PUSHINT 267
DICTMIN
NULLSWAPIFNOT
PUSHCONT {
	SWAP
	LDREF
	LDREF
	LDU 8
	LDMSGADDR
	LDU 256
	LDREF
	PLDU 128
	TUPLE 7
	TUPLE 2
}
IF
;; decl: minToken
;; if
;; push identifier minToken
DUP
ISNULL
PUSHCONT {
	;; push identifier minToken
	DUP
	DUP
	ISNULL
	THROWIF 63
	UNTUPLE 2
	;; decl: key
	;; decl: value
	; expValue
	PUSH S5
	; end expValue
	;; push identifier key
	PUSH S2
	;; array.push(..)
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSET
	PAIR
	; colValue
	POP S6
	; end colValue
	; expValue
	PUSH S4
	; end expValue
	;; get member symbol
	;; push identifier value
	PUSH S1
	INDEX 1
	;; array.push(..)
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETREF
	PAIR
	; colValue
	POP S5
	; end colValue
	; expValue
	PUSH S3
	; end expValue
	;; get member name
	;; push identifier value
	PUSH S1
	INDEX 0
	;; array.push(..)
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETREF
	PAIR
	; colValue
	POP S4
	; end colValue
	; while
	FALSE ; decl return flag
	PUSHCONT {
		DUP
		LESSINT 2
		DUP
		PUSHCONT {
			DROP
			TRUE
		}
		IF
	}
	PUSHCONT {
		;; map.next
		;; push identifier key
		PUSH S2
		;; push identifier _tokens
		GETGLOB 11
		PUSHINT 267
		DICTGETNEXT
		NULLSWAPIFNOT
		PUSHCONT {
			SWAP
			LDREF
			LDREF
			LDU 8
			LDMSGADDR
			LDU 256
			LDREF
			PLDU 128
			TUPLE 7
			TUPLE 2
		}
		IF
		;; decl: nextToken
		;; if
		FALSE ; decl return flag
		;; push identifier nextToken
		PUSH S1
		ISNULL
		NOT
		PUSHCONT {
			;; push identifier nextToken
			PUSH S1
			DUP
			ISNULL
			THROWIF 63
			UNTUPLE 2
			;; decl: nextKey
			;; decl: nextValue
			; expValue
			PUSH S10
			; end expValue
			;; push identifier nextKey
			PUSH S2
			;; array.push(..)
			SWAP
			UNPAIR
			PUSH S1
			INC
			XCHG s3
			ROTREV
			PUSHINT 32
			DICTUSET
			PAIR
			; colValue
			POP S11
			; end colValue
			; expValue
			PUSH S9
			; end expValue
			;; get member symbol
			;; push identifier nextValue
			PUSH S1
			INDEX 1
			;; array.push(..)
			SWAP
			UNPAIR
			PUSH S1
			INC
			XCHG s3
			ROTREV
			PUSHINT 32
			DICTUSETREF
			PAIR
			; colValue
			POP S10
			; end colValue
			; expValue
			PUSH S8
			; end expValue
			;; get member name
			;; push identifier nextValue
			PUSH S1
			INDEX 0
			;; array.push(..)
			SWAP
			UNPAIR
			PUSH S1
			INC
			XCHG s3
			ROTREV
			PUSHINT 32
			DICTUSETREF
			PAIR
			; colValue
			POP S9
			; end colValue
			; expValue
			; end expValue
			;; push identifier nextKey
			PUSH S1
			; colValue
			POP S7
			; end colValue
			DROP2
		}
		PUSHCONT {
			;; break
			BLKDROP 3
			PUSHINT 2
			RET
		}
		IFELSE
		DUP
		IFRET
		DROP
		;; end if
		DROP
	}
	WHILE
	DROP
	; end while
	DROP2
}
IFNOT
;; end if
;; returning named params
DROP
; end function getTokens

.globl	c7_to_c4
.type	c7_to_c4, @function
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
GETGLOB 10
GETGLOB 11
GETGLOB 12
REVERSE 4, 0
STSLICE
STDICT
STDICT
ENDC
POP C4

.globl	c4_to_c7
.type	c4_to_c7, @function
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDMSGADDR
LDDICT
PLDDICT
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDMSGADDR
	LDDICT
	PLDDICT
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init governanceAddr
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 10
	; init _tokens
	NEWDICT
	SETGLOB 11
	; init _pools
	NEWDICT
	SETGLOB 12
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal,        0
.internal	:main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
GETGLOB 4
TRUE
SETINDEXQ 1
PUSHINT 10000000
SETINDEXQ 2
NULL
SETINDEXQ 3
PUSHINT 1
SETINDEXQ 4
SETGLOB 4
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
PUSH S1 ; funcId body' funcId
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	DROP2
	THROW 60
}
IFJMP
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	DROP
	THROW 60
}
IF

.internal-alias :main_external,        -1
.internal	:main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALL $c4_to_c7_with_init_storage$
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	ROT
	GETGLOB 2
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
IF
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU  32 ; funcId body
PUSH S1 ; funcId body funcId
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	DROP2
	THROW 60
}
IFJMP
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	DROP
	THROW 60
}
IF

