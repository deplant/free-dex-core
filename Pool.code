.globl	constructor
.public	constructor
.type	constructor, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7_with_init_storage$
}
IF
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
ENDS
; modifier vaultOnly
;; get member sender
GETGLOB 9
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SDEQ
NOT
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; get member sender
	GETGLOB 9
	;; push identifier vaultAddr
	GETGLOB 10
	SDEQ
}
IF
THROWIFNOT 100
; constructor PairPool
; end constructor PairPool
; end modifier vaultOnly
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	checkSenderTIP3_internal
.type	checkSenderTIP3_internal, @function
;; param: _token
; function checkSenderTIP3
;; return
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; get member ttwCode
;; push identifier _token
PUSH S1
INDEX 5
CALL $expectedAddress_internal$
NIP
; end function checkSenderTIP3

.globl	provide
.public	provide
.type	provide, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
PUSH S1
PUSHCONT {
	LDU 32
	GETGLOB 4
	ROT
	SETINDEXQ 5
	SETGLOB 4
}
IFNOT
; Decode input parameters
; Decode _tokenA
LDMSGADDR
; Decode _tokenB
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode _amountA
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode _amountB
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: _tokenA
;; param: _tokenB
;; param: _amountA
;; param: _amountB
; function provide
;; ret param: liqResult
PUSHINT 0
;; ret param: liqAddress
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; get member value
CALL $message_balance_macro$
;; push identifier TOKEN_IMPORT_FEE
PUSHINT 1000000000
PUSHINT 20000000
;; +
ADD
UFITS 64
;; >=
GEQ
THROWIFNOT 109
;; push identifier _amountA
PUSH S3
GTINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier _amountB
	PUSH S2
	GTINT 0
}
IF
THROWIFNOT 110
;; push identifier _tokenA
PUSH S5
;; push identifier _tokenB
PUSH S5
SDLEXCMP
ISNEG
PUSHCONT {
	;; push identifier _tokenA
	PUSH S5
	;; push identifier _tokenB
	PUSH S5
}
PUSHCONT {
	;; push identifier _tokenB
	PUSH S4
	;; push identifier _tokenA
	PUSH S6
}
IFELSE
;; decl: addrA
;; decl: addrB
;; push identifier _tokenA
PUSH S7
;; push identifier _tokenB
PUSH S7
SDLEXCMP
ISNEG
PUSHCONT {
	;; push identifier tokenA
	GETGLOB 11
	;; push identifier tokenB
	GETGLOB 12
}
PUSHCONT {
	;; push identifier tokenB
	GETGLOB 12
	;; push identifier tokenA
	GETGLOB 11
}
IFELSE
;; decl: tokA
;; decl: tokB
;; push identifier _tokenA
PUSH S9
;; push identifier _tokenB
PUSH S9
SDLEXCMP
ISNEG
PUSHCONT {
	;; push identifier _amountA
	PUSH S7
	;; push identifier _amountB
	PUSH S7
}
PUSHCONT {
	;; push identifier _amountB
	PUSH S6
	;; push identifier _amountA
	PUSH S8
}
IFELSE
;; decl: amountA
;; decl: amountB
;; get member rootAddr
;; push identifier tokenA
GETGLOB 11
INDEX 3
;; push identifier addrA
PUSH S6
SDEQ
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; get member rootAddr
	;; push identifier tokenB
	GETGLOB 12
	INDEX 3
	;; push identifier addrB
	PUSH S5
	SDEQ
}
IF
THROWIFNOT 106
;; push identifier tokA
PUSH S3
CALL $checkSenderTIP3_internal$
;; decl: senderWalletA
;; push identifier tokB
PUSH S3
CALL $checkSenderTIP3_internal$
;; decl: senderWalletB
;; Remote call ITONTokenWallet.approve
;; push identifier senderWalletA
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x0000000c
;; spender
;; get member rootAddr
;; push identifier tokenA
GETGLOB 11
INDEX 3
STSLICER
;; remainingTokens
PUSHINT 0
STUR 256
;; tokens
;; push identifier amountA
PUSH S5
STUR 256
STBREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; Remote call ITONTokenWallet.internalTransferFrom
;; push identifier senderWalletA
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x0000000e
;; to
;; get member rootAddr
;; push identifier tokenA
GETGLOB 11
INDEX 3
STSLICER
;; tokens
;; push identifier amountA
PUSH S5
STUR 256
STBREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; Remote call ITONTokenWallet.approve
;; push identifier senderWalletB
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x0000000c
;; spender
;; get member rootAddr
;; push identifier tokenB
GETGLOB 12
INDEX 3
STSLICER
;; remainingTokens
PUSHINT 0
STUR 256
;; tokens
;; push identifier amountB
PUSH S4
STUR 256
STBREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; Remote call ITONTokenWallet.internalTransferFrom
;; push identifier senderWalletB
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x0000000e
;; to
;; get member rootAddr
;; push identifier tokenB
GETGLOB 12
INDEX 3
STSLICER
;; tokens
;; push identifier amountB
PUSH S4
STUR 256
STBREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; push identifier amountA
PUSH S3
; expValue
;; fetch balanceA
GETGLOB 14
; end expValue
SWAP
ADD
UFITS 128
; colValue
SETGLOB 14
; end colValue
;; push identifier amountB
PUSH S2
; expValue
;; fetch balanceB
GETGLOB 15
; end expValue
SWAP
ADD
UFITS 128
; colValue
SETGLOB 15
; end colValue
; expValue
; end expValue
;; push identifier amountA
PUSH S3
;; push identifier amountB
PUSH S3
;; *
MUL
UFITS 128
; colValue
POP S10
; end colValue
;; Remote call IRootTokenContract.deployWallet
;; push identifier TOKEN_IMPORT_FEE
PUSHINT 1000000000
PUSHINT 20000000
;; +
ADD
UFITS 64
;; get member rootAddr
;; push identifier tokenLiq
GETGLOB 13
INDEX 3
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x31c32499
;; tokens
;; push identifier liqResult
PUSH S11
STUR 128
;; grams
PUSHINT 500000000
STUR 128
;; wallet_public_key
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
STUR 256
;; owner_address
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
STSLICER
NEWC
;; gas_back_address
;; get member sender
GETGLOB 9
STSLICER
STBREFR
STBREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; push identifier tokenLiq
GETGLOB 13
CALL $checkSenderTIP3_internal$
; expValue
; end expValue
; colValue
POP S9
; end colValue
;; emit Provided
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x278e69ca
;; pool
MYADDR
STSLICER
;; pubkey
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
STUR 256
;; amountA
;; push identifier amountA
PUSH S4
STUR 128
;; amountB
;; push identifier amountB
PUSH S3
STUR 128
ENDC
PUSHINT 1
SENDRAWMSG
;; returning named params
BLKSWAP 4, 10
BLKDROP 12
;; emitting 2 value(s)
PUSH S2
EQINT -1
PUSHCONT {
	PUSH S4
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xcfac466e
	PUSH S2
	STUR 128
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 1
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S2
	STUR 128
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP2
; end function provide
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	swap
.public	swap
.type	swap, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
PUSH S1
PUSHCONT {
	LDU 32
	GETGLOB 4
	ROT
	SETINDEXQ 5
	SETGLOB 4
}
IFNOT
; Decode input parameters
; Decode srcAmount
LDU 128
; Decode dstAmount
LDU 128
; Decode src
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode dst
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode minReturn
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode referral
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: srcAmount
;; param: dstAmount
;; param: src
;; param: dst
;; param: minReturn
;; param: referral
; function swap
;; ret param: result
PUSHINT 0
;; returning named params
BLKSWAP 6, 1
BLKDROP 6
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x85244002
	PUSH S1
	STUR 256
	ENDC
	PUSHINT 1
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 256
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
; end function swap
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	expectedAddress_internal
.type	expectedAddress_internal, @function
;; param: _pubkey
;; param: _code
; function expectedAddress
NEWDICT
;; push identifier _pubkey
PUSH S2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
NEWC
STDICT
ENDC
;; push identifier _code
PUSH S1
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
;; decl: stateInit
;; return
;; push identifier stateInit
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
XCHG s3
BLKDROP 3
; end function expectedAddress

.globl	c7_to_c4
.type	c7_to_c4, @function
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 13
GETGLOB 14
GETGLOB 15
GETGLOB 16
REVERSE 8, 0
STSLICE
SWAP
UNTUPLE 7
NEWC
PUSH S7
STREFR
PUSH S6
STREFR
PUSH S5
STUR 8
PUSH S4
STSLICER
PUSH S3
STUR 256
PUSH S2
STREFR
PUSH S1
STUR 128
XCHG s7
BLKDROP 7
STBREFR
SWAP
UNTUPLE 7
NEWC
PUSH S7
STREFR
PUSH S6
STREFR
PUSH S5
STUR 8
PUSH S4
STSLICER
PUSH S3
STUR 256
PUSH S2
STREFR
PUSH S1
STUR 128
XCHG s7
BLKDROP 7
STBREFR
SWAP
UNTUPLE 7
NEWC
PUSH S7
STREFR
PUSH S6
STREFR
PUSH S5
STUR 8
PUSH S4
STSLICER
PUSH S3
STUR 256
PUSH S2
STREFR
PUSH S1
STUR 128
XCHG s7
BLKDROP 7
STBREFR
STU 128
STU 128
STI 1
ENDC
POP C4

.globl	c4_to_c7
.type	c4_to_c7, @function
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDMSGADDR
LDREFRTOS
LDREF
LDREF
LDU 8
LDMSGADDR
LDU 256
LDREF
PLDU 128
TUPLE 7
SETGLOB 11
LDREFRTOS
LDREF
LDREF
LDU 8
LDMSGADDR
LDU 256
LDREF
PLDU 128
TUPLE 7
SETGLOB 12
LDREFRTOS
LDREF
LDREF
LDU 8
LDMSGADDR
LDU 256
LDREF
PLDU 128
TUPLE 7
SETGLOB 13
LDU 128
LDU 128
PLDI 1
SETGLOB 16
SETGLOB 15
SETGLOB 14
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDMSGADDR
	LDREFRTOS
	LDREF
	LDREF
	LDU 8
	LDMSGADDR
	LDU 256
	LDREF
	PLDU 128
	TUPLE 7
	SETGLOB 11
	LDREFRTOS
	LDREF
	LDREF
	LDU 8
	LDMSGADDR
	LDU 256
	LDREF
	PLDU 128
	TUPLE 7
	SETGLOB 12
	LDREFRTOS
	LDREF
	LDREF
	LDU 8
	LDMSGADDR
	LDU 256
	LDREF
	PLDU 128
	TUPLE 7
	SETGLOB 13
	LDU 128
	LDU 128
	PLDI 1
	SETGLOB 16
	SETGLOB 15
	SETGLOB 14
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init vaultAddr
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	IFNOT
	SETGLOB 10
	; init tokenA
	PUSHINT 2
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		LDREF
		LDREF
		LDU 8
		LDMSGADDR
		LDU 256
		LDREF
		PLDU 128
		TUPLE 7
	}
	PUSHCONT {
		NEWC
		ENDC
		NEWC
		ENDC
		PUSHINT 0
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		NEWC
		ENDC
		PUSHINT 0
		TUPLE 7
	}
	IFELSE
	SETGLOB 11
	; init tokenB
	PUSHINT 3
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		LDREF
		LDREF
		LDU 8
		LDMSGADDR
		LDU 256
		LDREF
		PLDU 128
		TUPLE 7
	}
	PUSHCONT {
		NEWC
		ENDC
		NEWC
		ENDC
		PUSHINT 0
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		NEWC
		ENDC
		PUSHINT 0
		TUPLE 7
	}
	IFELSE
	SETGLOB 12
	; init tokenLiq
	NEWC
	ENDC
	NEWC
	ENDC
	PUSHINT 0
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	NEWC
	ENDC
	PUSHINT 0
	TUPLE 7
	SETGLOB 13
	; init balanceA
	PUSHINT 0
	SETGLOB 14
	; init balanceB
	PUSHINT 0
	SETGLOB 15
	; init closed
	PUSHINT 0
	SETGLOB 16
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal,        0
.internal	:main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
GETGLOB 4
TRUE
SETINDEXQ 1
PUSHINT 10000000
SETINDEXQ 2
NULL
SETINDEXQ 3
PUSHINT 1
SETINDEXQ 4
SETGLOB 4
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
PUSH S1 ; funcId body' funcId
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	DROP2
	THROW 60
}
IFJMP
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	DROP
	THROW 60
}
IF

.internal-alias :main_external,        -1
.internal	:main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALL $c4_to_c7_with_init_storage$
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	ROT
	GETGLOB 2
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
IF
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU  32 ; funcId body
PUSH S1 ; funcId body funcId
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	DROP2
	THROW 60
}
IFJMP
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	DROP
	THROW 60
}
IF

.globl	vaultAddr
.public	vaultAddr
.type	vaultAddr, @function
CALL $c4_to_c7$
GETGLOB 10
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xdba74b48
PUSH S1
STSLICER
ENDC
PUSHINT 1
SENDRAWMSG
TRUE
SETGLOB 7

.globl	tokenA
.public	tokenA
.type	tokenA, @function
CALL $c4_to_c7$
GETGLOB 11
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xb7468c43
PUSH S1
UNTUPLE 7
BLKSWAP 1, 7
PUSH S7
STREFR
PUSH S6
STREFR
PUSH S5
STUR 8
PUSH S4
STSLICER
PUSH S3
STUR 256
PUSH S2
STREFR
PUSH S1
STUR 128
XCHG s7
BLKDROP 7
ENDC
PUSHINT 1
SENDRAWMSG
TRUE
SETGLOB 7

.globl	tokenB
.public	tokenB
.type	tokenB, @function
CALL $c4_to_c7$
GETGLOB 12
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x8773661a
PUSH S1
UNTUPLE 7
BLKSWAP 1, 7
PUSH S7
STREFR
PUSH S6
STREFR
PUSH S5
STUR 8
PUSH S4
STSLICER
PUSH S3
STUR 256
PUSH S2
STREFR
PUSH S1
STUR 128
XCHG s7
BLKDROP 7
ENDC
PUSHINT 1
SENDRAWMSG
TRUE
SETGLOB 7

